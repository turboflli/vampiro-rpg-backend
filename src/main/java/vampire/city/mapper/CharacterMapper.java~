package vampire.city.mapper;

import org.springframework.stereotype.Component;
import vampire.city.model.*;
import vampire.city.model.Character;
import vampire.city.model.CharacterDTO;

import java.util.List;
import java.util.stream.Collectors;

@Component
public class CharacterMapper {

    public Character fromDTO(CharacterDTO dto, User user, Clan clan, Road road) {
        Character character = new Character();
        // Dados básicos
        character.setName(dto.getName());
        character.setConcept(dto.getConcept());
        character.setDemeanor(dto.getDemeanor());
        character.setNature(dto.getNature());
        character.setGeneration(dto.getGeneration());
        character.setSire(dto.getSire());

        // Atributos
        character.setStrength(dto.getStrength());
        character.setDexterity(dto.getDexterity());
        character.setStamina(dto.getStamina());
        character.setCharisma(dto.getCharisma());
        character.setManipulation(dto.getManipulation());
        character.setAppearance(dto.getAppearance());
        character.setPerception(dto.getPerception());
        character.setIntelligence(dto.getIntelligence());
        character.setWits(dto.getWits());

        // Talentos
        character.setAlertness(dto.getAlertness());
        character.setAthletics(dto.getAthletics());
        character.setAwareness(dto.getAwareness());
        character.setBrawl(dto.getBrawl());
        character.setEmpathy(dto.getEmpathy());
        character.setExpression(dto.getExpression());
        character.setIntimidation(dto.getIntimidation());
        character.setLeadership(dto.getLeadership());
        character.setStreetwise(dto.getStreetwise());
        character.setSubterfuge(dto.getSubterfuge());

        // Habilidades
        character.setAnimal_kin(dto.getAnimal_kin());
        character.setArchery(dto.getArchery());
        character.setCrafts(dto.getCrafts());
        character.setEtiquette(dto.getEtiquette());
        character.setLegerdemain(dto.getLegerdemain());
        character.setMelee(dto.getMelee());
        character.setPerformance(dto.getPerformance());
        character.setRide(dto.getRide());
        character.setStealth(dto.getStealth());
        character.setSurvival(dto.getSurvival());

        // Conhecimentos
        character.setAcademics(dto.getAcademics());
        character.setEnigmas(dto.getEnigmas());
        character.setHeart_wisdom(dto.getHeart_wisdom());
        character.setInvestigation(dto.getInvestigation());
        character.setLaw(dto.getLaw());
        character.setMedicine(dto.getMedicine());
        character.setOccult(dto.getOccult());
        character.setPolitics(dto.getPolitics());
        character.setSeneschal(dto.getSeneschal());
        character.setTheology(dto.getTheology());

        // Disciplinas básicas
        character.setClanDiscipline1(dto.getClanDiscipline1());
        character.setClanDiscipline2(dto.getClanDiscipline2());
        character.setClanDiscipline3(dto.getClanDiscipline3());

        // Virtudes
        character.setConscience(dto.getConscience());
        character.setCourage(dto.getCourage());
        character.setSelf_control(dto.getSelf_control());

        // Outros
        character.setRoad_value(dto.getRoad_value());
        character.setWillpower(dto.getWillpower());
        character.setBloodpool(dto.getBloodpool());
        character.setExperience(dto.getExperience());

        // Referências
        character.setClan(clan);
        character.setRoad(road);
        character.setUser(user);

        // Disciplinas personalizadas
        List<Discipline> disciplinas = dto.getDisciplines().stream()
                .map(d -> new Discipline(d.getName(), d.getScore(), character))
                .collect(Collectors.toList());

        character.setDisciplines(disciplinas);

        List<Background> backgrounds = dto.getBackgrounds().stream()
                .map(b -> new Background(b.getName(), b.getScore(), character))
                .collect(Collectors.toList());

        character.setBackgrounds(backgrounds);

        List<Merit> merits = dto.getMerits().stream()
                .map(m -> new Merit(m.getName(), m.getScore(), m.getType(), character))
                .collect(Collectors.toList());
        character.setMerits(merits);

        List<Flaw> flaws = dto.getFlaws().stream()
                .map(f -> new Flaw(f.getName(), f.getScore(), f.getType(), character))
                .collect(Collectors.toList());
        character.setFlaws(flaws);

        return character;
    }

    public CharacterDTO toDTO(Character entity) {
        CharacterDTO dto = new CharacterDTO();

        dto.setId(entity.getId());
        // Dados básicos
        dto.setName(entity.getName());
        dto.setConcept(entity.getConcept());
        dto.setDemeanor(entity.getDemeanor());
        dto.setNature(entity.getNature());
        dto.setGeneration(entity.getGeneration());
        dto.setSire(entity.getSire());

        // Atributos
        dto.setStrength(entity.getStrength());
        dto.setDexterity(entity.getDexterity());
        dto.setStamina(entity.getStamina());
        dto.setCharisma(entity.getCharisma());
        dto.setManipulation(entity.getManipulation());
        dto.setAppearance(entity.getAppearance());
        dto.setPerception(entity.getPerception());
        dto.setIntelligence(entity.getIntelligence());
        dto.setWits(entity.getWits());

        // Talentos
        dto.setAlertness(entity.getAlertness());
        dto.setAthletics(entity.getAthletics());
        dto.setAwareness(entity.getAwareness());
        dto.setBrawl(entity.getBrawl());
        dto.setEmpathy(entity.getEmpathy());
        dto.setExpression(entity.getExpression());
        dto.setIntimidation(entity.getIntimidation());
        dto.setLeadership(entity.getLeadership());
        dto.setStreetwise(entity.getStreetwise());
        dto.setSubterfuge(entity.getSubterfuge());

        // Habilidades
        dto.setAnimal_kin(entity.getAnimal_kin());
        dto.setArchery(entity.getArchery());
        dto.setCrafts(entity.getCrafts());
        dto.setEtiquette(entity.getEtiquette());
        dto.setLegerdemain(entity.getLegerdemain());
        dto.setMelee(entity.getMelee());
        dto.setPerformance(entity.getPerformance());
        dto.setRide(entity.getRide());
        dto.setStealth(entity.getStealth());
        dto.setSurvival(entity.getSurvival());

        // Conhecimentos
        dto.setAcademics(entity.getAcademics());
        dto.setEnigmas(entity.getEnigmas());
        dto.setHeart_wisdom(entity.getHeart_wisdom());
        dto.setInvestigation(entity.getInvestigation());
        dto.setLaw(entity.getLaw());
        dto.setMedicine(entity.getMedicine());
        dto.setOccult(entity.getOccult());
        dto.setPolitics(entity.getPolitics());
        dto.setSeneschal(entity.getSeneschal());
        dto.setTheology(entity.getTheology());

        // Disciplinas básicas
        dto.setClanDiscipline1(entity.getClanDiscipline1());
        dto.setClanDiscipline2(entity.getClanDiscipline2());
        dto.setClanDiscipline3(entity.getClanDiscipline3());

        // Virtudes
        dto.setConscience(entity.getConscience());
        dto.setCourage(entity.getCourage());
        dto.setSelf_control(entity.getSelf_control());

        // Outros
        dto.setRoad_value(entity.getRoad_value());
        dto.setWillpower(entity.getWillpower());
        dto.setBloodpool(entity.getBloodpool());
        dto.setExperience(entity.getExperience());

        // Referências
        dto.setClanId(entity.getClan().getId());
        dto.setRoadId(entity.getRoad().getId());

        // Disciplinas personalizadas
        List<DisciplineDTO> disciplinas = entity.getDisciplines().stream()
                .map(d -> new DisciplineDTO(d.getName(), d.getScore()))
                .collect(Collectors.toList());

        dto.setDisciplines(disciplinas);

        List<BackgroundDTO> backgrounds = entity.getBackgrounds().stream()
                .map(b -> new BackgroundDTO(b.getName(), b.getScore()))
                .collect(Collectors.toList());

        dto.setBackgrounds(backgrounds);

        List<MeritDTO> merits = entity.getMerits().stream()
                .map(m -> new MeritDTO(m.getName(), m.getScore(), m.getType()))
                .collect(Collectors.toList());
        dto.setMerits(merits);

        List<FlawDTO> flaws = entity.getFlaws().stream()
                .map(f -> new FlawDTO(f.getName(), f.getScore(), f.getType()))
                .collect(Collectors.toList());
        dto.setFlaws(flaws);

        return dto;
    }

    public CharacterSummaryDTO toSummaryDTO(Character entity) {
    CharacterSummaryDTO characterSummaryDTO = new CharacterSummaryDTO();

    characterSummaryDTO.setId(entity.getId());
    characterSummaryDTO.setName(entity.getName());
    characterSummaryDTO.setClanName(entity.getClan().getName());
    characterSummaryDTO.setRoadName(entity.getRoad().getName() + " - " + entity.getRoad().getPathName());
    characterSummaryDTO.setGeneration(characterSummaryDTO.getGeneration());
    return characterSummaryDTO;
    }
}
